import html
import logging
import random

from aiogram import types, F, Router
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from tools.ai.MJWorker import Midjourney
from tools.ai.conversation import OpenAI
from tools.ai.stadif import StableDiffAI
from tools.states import DAImage, SDImage, Text, MJImage
from tools.utils import config, load_params, split_into_chunks

logger = logging.getLogger(__name__)
router = Router()
openai = OpenAI()
stable_diff_ai = StableDiffAI()
params = load_params("params.json")
params_file = "params.json"
image_generators = [Midjourney(params_file, i) for i in range(10)]


@router.message(F.text.startswith("@naastyyaabot"))
async def ask(message: types.Message, state: FSMContext) -> None:
    await state.set_state(Text.get)
    uid = message.from_user.id
    if uid in config.banned_user_ids:
        text = "–Ω–µ —Ö–æ—á—É —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å"
        await message.reply(text, parse_mode=None)
    else:
        logger.info("%s", message)
        text = html.escape(message.text)
        escaped_text = text.strip('@naastyyaabot ')

        # Generate response
        replay_text, total_tokens = await openai.get_chat_response(uid, escaped_text)

        chunks = split_into_chunks(replay_text)
        for i, chunk in enumerate(chunks):
            try:
                if i == 0:
                    await message.reply(chunk, parse_mode=None)
            except Exception as err:
                try:
                    logger.info('From try in for index chunks: %s', err)
                    await message.reply(chunk + str(err), parse_mode=None)
                except Exception as error:
                    logger.info('Last exception from Core: %s', error)
                    await message.reply(str(error), parse_mode=None)


@router.message(Text.get, F.reply_to_message.from_user.is_bot)
async def process_ask(message: types.Message) -> None:
    uid = message.from_user.id
    if uid in config.banned_user_ids:
        text = "–Ω–µ —Ö–æ—á—É —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å"
        await message.reply(text, parse_mode=None)
    else:
        logger.info("%s", message)

        # Generate response
        replay_text, total_tokens = await openai.get_chat_response(uid, message.text)
        chunks = split_into_chunks(replay_text)
        for i, chunk in enumerate(chunks):
            try:
                if i == 0:
                    await message.reply(chunk, parse_mode=None)
            except Exception as err:
                try:
                    logger.info('From try in for index chunks: %s', err)
                    await message.reply(chunk + str(err), parse_mode=None)
                except Exception as error:
                    logger.info('Last exception from Core: %s', error)
                    await message.reply(str(error), parse_mode=None)


@router.message(F.text.startswith("–ù–∞—Ä–∏—Å—É–π: "))
async def draw(message: types.Message, state: FSMContext) -> None:
    await state.set_state(DAImage.get)
    uid = message.from_user.id
    if uid in config.banned_user_ids:
        text = "–Ω–µ —Ö–æ—á—É —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å"
        await message.reply(text, parse_mode=None)
    else:
        logger.info("%s", message)
        text = html.escape(message.text)
        escaped_text = text.strip('–ù–∞—Ä–∏—Å—É–π: ')
        result = await openai.send_dalle(escaped_text)
        print(result)
        try:
            photo = result
            await message.reply_photo(types.URLInputFile(photo))
        except Exception as err:
            try:
                text = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ –ø–æ –ø–ª–∞–Ω—É. –ï—Å–ª–∏ –≤ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–∏ –Ω–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ –Ω—É–∂–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.\n "
                logger.info('From try in Picture: %s', err)
                await message.reply(text, parse_mode=None)
            except Exception as error:
                logger.info('Last exception from Picture: %s', error)
                await message.reply(str(error), parse_mode=None)


@router.message(DAImage.get)
async def process_paint(message: types.Message, state: FSMContext) -> None:
    await state.set_state(DAImage.result)
    logger.info("%s", message)


@router.message(F.text.startswith("–û—Ç–æ–±—Ä–∞–∑–∏: "))
async def draw(message: types.Message, state: FSMContext) -> None:
    await state.set_state(MJImage.get)
    uid = message.from_user.id
    if uid in config.banned_user_ids:
        text = "–Ω–µ —Ö–æ—á—É —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å"
        await message.reply(text, parse_mode=None)
    else:
        logger.info("%s", message)
        text = html.escape(message.text)
        escaped_text = text.strip('–û—Ç–æ–±—Ä–∞–∑–∏: ')
        image_generator = random.choice(image_generators)
        resp = await image_generator.get_images(escaped_text)
        logger.info("RESPONSE FROM IMAGE GENERA %s", resp)
        try:
            photo = resp[0]['url']
            logger.info("OK GET RESULT PHOTO %s", photo)
            uuid = resp[0]['uuid']
            logger.info("OK GET RESULT UUID %s", uuid)
            message_id = resp[0]['id']
            logger.info("OK GET RESULT MESS ID %s", message_id)
            logger.info("OK GET RESULT IMGEN CHANNEL ID %s", image_generators.index(image_generator))
            await state.update_data(msg_id=message_id)
            await state.update_data(image_generator=image_generators.index(image_generator))
            await state.update_data(uuid=uuid)
            builder = InlineKeyboardBuilder()
            for i in range(1, 5):
                print(image_generators.index(image_generator))
                builder.add(types.InlineKeyboardButton(text=f"Upscale {i}", callback_data=f"ups:{i}"))
            builder.adjust(4)
            await message.reply_photo(photo=types.URLInputFile(photo), caption="–∫–∞–∫–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å?", reply_markup=builder.as_markup(resize_keyboard=True))
        except Exception as err:
            try:
                text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n "
                logger.info('From try in Picture: %s', err)
                await message.reply(text, parse_mode=None)
            except Exception as error:
                logger.info('Last exception from Picture: %s', error)
                await message.reply(str(error), parse_mode=None)


@router.message(MJImage.get)
async def process_imagine(message: types.Message, state: FSMContext) -> None:
    await state.set_state(MJImage.result)
    logger.info("%s", message)


@router.message(F.text.startswith("–ü—Ä–µ–¥—Å—Ç–∞–≤—å: "))
async def imagine(message: types.Message, state: FSMContext) -> None:
    await state.set_state(SDImage.get)
    uid = message.from_user.id
    if uid in config.banned_user_ids:
        text = "–Ω–µ —Ö–æ—á—É —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å"
        await message.reply(text, parse_mode=None)
    else:
        logger.info("%s", message)
        text = html.escape(message.text)
        escaped_text = text.strip('–ü—Ä–µ–¥—Å—Ç–∞–≤—å: ')
        result = await stable_diff_ai.send2sdapi(escaped_text)
        logger.info("Result: %s", result)
        text = "‚è≥–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + str(result['generationTime']) \
               + " —Å–µ–∫—É–Ω–¥. üåæ–ó–µ—Ä–Ω–æ: " \
               + str(result['meta']['seed']) \
               + ", ü¶∂–®–∞–≥–∏: " + str(result['meta']['steps'])
        try:
            photo = result['output'][0]
            await message.reply_photo(types.URLInputFile(photo), caption=text)
        except Exception as err:
            try:
                text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n "
                logger.info('From try in SD Picture: %s', err)
                await message.answer(text + result['output'][0], parse_mode=None)
            except Exception as error:
                logger.info('Last exception from SD Picture: %s', error)
                await message.answer(str(error), parse_mode=None)


@router.message(SDImage.get)
async def process_imagine(message: types.Message, state: FSMContext) -> None:
    await state.set_state(SDImage.result)
    logger.info("%s", message)


@router.message(Command(commands="help"))
async def info(message: types.Message):
    uid = message.from_user.id
    if uid in config.banned_user_ids:
        text = "–Ω–µ —Ö–æ—á—É —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å"
        await message.reply(text, parse_mode=None)
    else:
        text = ("ü§ñ–ù–ê–°–¢–Ø - –í–ê–® –ü–û–ú–û–©–ù–ò–ö –í –°–ï–¢–ò!\n" 
                "\n"
                "–ü—Ä–æ–µ–∫—Ç—ã —É—á–∞—Å—Ç–∏—è:\n"
                "–ù–µ–π—Ä–æ–Ω–∫–∞ –ö–∞–∂–¥—ã–π –î–µ–Ω—å\n"
                "Paperfunk Chat\n"
                "PPRFNK –¢–µ—Ö–Ω–æ–∫—Ä–∞—Ç—ã\n"
                "\n"
                "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:\n"
                "üö´–ï—Å–ª–∏ –∑–∞–º–µ—Ç–∏–ª–∏ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å: /report.\n"
                "‚ùå–û—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ: /cancel.\n"
                "\n"
                "–û–±—â–µ–Ω–∏–µ:\n"
                "–•–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å? –û–±—Ä–∞—â–∞–π—Ç–µ—Å—å: @naastyyaabot.\n"
                "\n"
                "üé®DaLLE2:\n"
                "–ù–∞—Ä–∏—Å—É–π: ....\n"
                "\n"
                "üååStable Diffusio (SD):\n"
                "–ü—Ä–µ–¥—Å—Ç–∞–≤—å: ....\n"
                "\n"
                "üå†Midjourney:\n"
                "–û—Ç–æ–±—Ä–∞–∑–∏: ...\n"
                "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω–æ 3 –º–∏–Ω—É—Ç—ã. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –±—É–¥—É—Ç –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ–¥–∏–Ω –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–ª—è –ª—É—á—à–µ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
                "\n"
                "\n"
                "–ê–≤—Ç–æ—Ä: @vistee, –ü–æ–º–æ–≥–∞–ª: @paperclipdnb")
        await message.reply(text, parse_mode=None)
