import logging

from aiogram import types, F, Router
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext

from misc.ai_tools import OpenAI, StableDiffAI
from misc.states import DAImage, SDImage, Text, Video
from misc.utils import config, trim_image, trim_video
from misc.utils import trim_name, trim_cmd, split_into_chunks

logger = logging.getLogger("__name__")
router = Router()

openai = OpenAI()
stable_diff_ai = StableDiffAI()


@router.message(F.text.startswith("@naastyyaabot"))
async def ask(message: types.Message, state: FSMContext) -> None:
    await state.set_state(Text.get)
    uid = message.from_user.id
    if uid in config.banned_user_ids:
        text = "–Ω–µ —Ö–æ—á—É —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å"
        await message.reply(text, parse_mode=None)
    else:
        logging.info("%s", message)
        trimmed = trim_name(message.text)

        # Generate response
        replay_text, total_tokens = await openai.get_chat_response(uid, trimmed)

        chunks = split_into_chunks(replay_text)
        for index, chunk in enumerate(chunks):
            try:
                if index == 0:
                    await message.reply(chunk, parse_mode=None)
            except Exception as err:
                try:
                    logging.info('From try in for index chunks: %s', err)
                    await message.reply(chunk + err, parse_mode=None)
                except Exception as error:
                    logging.info('Last exception from Core: %s', error)
                    await message.reply(error, parse_mode=None)


@router.message(Text.get, F.reply_to_message.from_user.is_bot)
async def process_ask(message: types.Message) -> None:
    uid = message.from_user.id
    if uid in config.banned_user_ids:
        text = "–Ω–µ —Ö–æ—á—É —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å"
        await message.reply(text, parse_mode=None)
    else:
        logging.info("%s", message)

        # Generate response
        replay_text, total_tokens = await openai.get_chat_response(uid, message.text)
        chunks = split_into_chunks(replay_text)
        for index, chunk in enumerate(chunks):
            try:
                if index == 0:
                    await message.reply(chunk, parse_mode=None)
            except Exception as err:
                try:
                    logging.info('From try in for index chunks: %s', err)
                    await message.reply(chunk + err, parse_mode=None)
                except Exception as error:
                    logging.info('Last exception from Core: %s', error)
                    await message.reply(error, parse_mode=None)


@router.message(F.text.startswith("–ù–∞—Ä–∏—Å—É–π: "))
async def draw(message: types.Message, state: FSMContext) -> None:
    await state.set_state(DAImage.get)
    uid = message.from_user.id
    if uid in config.banned_user_ids:
        text = "–Ω–µ —Ö–æ—á—É —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å"
        await message.reply(text, parse_mode=None)
    else:
        logging.info("%s", message)
        trimmed = trim_cmd(message.text)
        result = await openai.send_dalle(trimmed)
        try:
            photo = result
            await message.reply_photo(photo)
        except Exception as err:
            try:
                text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n "
                logging.info('From try in Picture: %s', err)
                await message.reply(text + result, parse_mode=None)
            except Exception as error:
                logging.info('Last exception from Picture: %s', error)
                await message.reply(error, parse_mode=None)


@router.message(DAImage.get)
async def process_paint(message: types.Message, state: FSMContext) -> None:
    await state.set_state(DAImage.result)
    logging.info("%s", message)


@router.message(F.text.startswith("–ü—Ä–µ–¥—Å—Ç–∞–≤—å: "))
async def imagine(message: types.Message, state: FSMContext) -> None:
    await state.set_state(SDImage.get)
    uid = message.from_user.id
    if uid in config.banned_user_ids:
        text = "–Ω–µ —Ö–æ—á—É —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å"
        await message.reply(text, parse_mode=None)
    else:
        logging.info("%s", message)
        trimmed = trim_image(message.text)
        result = await stable_diff_ai.send_sdapi(trimmed)
        print(result)
        text = "‚è≥–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: " + str(result['generationTime']) \
               + " —Å–µ–∫—É–Ω–¥. üåæ–ó–µ—Ä–Ω–æ: " \
               + str(result['meta']['seed']) \
               + ", üíÉ–ú–æ–¥–µ–ª—å: " + str(result['meta']['model']) \
               + ", ü¶∂–®–∞–≥–∏: " + str(result['meta']['steps'])
        try:
            photo = result['output'][0]
            await message.reply_photo(photo, caption=text)
        except Exception as err:
            try:
                text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n "
                logging.info('From try in SD Picture: %s', err)
                await message.answer(text + result['output'][0], parse_mode=None)
            except Exception as error:
                logging.info('Last exception from SD Picture: %s', error)
                await message.answer(error, parse_mode=None)


@router.message(SDImage.get)
async def process_imagine(message: types.Message, state: FSMContext) -> None:
    await state.set_state(SDImage.result)
    logging.info("%s", message)


@router.message(F.text.startswith("–ó–∞–º—É—Ç–∏, "))
async def imagine(message: types.Message, state: FSMContext) -> None:
    await state.set_state(Video.get)
    uid = message.from_user.id
    if uid in config.banned_user_ids:
        text = "–Ω–µ —Ö–æ—á—É —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å"
        await message.reply(text, parse_mode=None)
    else:
        logging.info("%s", message)
        trimmed = trim_video(message.text)
        result = await stable_diff_ai.send_sd_video(trimmed)
        print(result)
        try:
            video = result['output'][0]
            await message.reply_video(video)
        except Exception as err:
            try:
                text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n "
                logging.info('From try in SD Picture: %s', err)
                await message.reply(text + result['output'][0], parse_mode=None)
            except Exception as error:
                logging.info('Last exception from SD Picture: %s', error)
                await message.answer(error, parse_mode=None)


@router.message(Video.get)
async def process_imagine(message: types.Message, state: FSMContext) -> None:
    await state.set_state(Video.result)
    logging.info("%s", message)


@router.message(Command(commands="help"))
async def info(message: types.Message):
    uid = message.from_user.id
    if uid in config.banned_user_ids:
        text = "–Ω–µ —Ö–æ—á—É —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å"
        await message.reply(text, parse_mode=None)
    else:
        text = "–ë–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è PPRFNK!\n" \
               "–ü–æ –∫–æ–º–∞–Ω–¥–µ /report —Å–æ–æ–±—â—É –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º —á–∞—Ç–∞ –æ –ø–ª–æ—Ö–æ–º —á–µ–ª–æ–≤–µ–∫–µ! \n" \
               "–ï—Å–ª–∏ –æ—à–∏–±—Å—è –∏–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –Ω–∞–ø–∏—à–∏ /cancel \n" \
               "–•–æ—á–µ—à—å —Å–æ –º–Ω–æ–π –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? –û–±—Ä–∞—Ç–∏—Å—å –∫–æ –º–Ω–µ —á–µ—Ä–µ–∑ –Ω–∏–∫–Ω–µ–π–º @naastyyaabot ...\n" \
               "–°–∫–∞–∂–∏ —á—Ç–æ —Ö–æ—á–µ—à—å –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å, —è –ø–µ—Ä–µ–¥–∞–º —ç—Ç–æ –º–æ–µ–π –ø–æ–¥—Ä—É–≥–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ DaLL E, –∞ –æ–Ω–∞ –Ω–∞—Ä–∏—Å—É–µ—Ç –∫–æ–¥–æ–≤–æ–µ —Å–ª–æ–≤–æ " \
               "'–ù–∞—Ä–∏—Å—É–π: ...'\n" \
               "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É –º–æ–µ–π –ø–æ–¥—Ä—É–≥–µ SD –Ω–∞–ø–∏—à–∏ –º–Ω–µ '–ü—Ä–µ–¥—Å—Ç–∞–≤—å: ...' --- –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –º–µ–Ω—è—é api\n" \
               "\n" \
               "–ê–≤—Ç–æ—Ä: @vistee"
        await message.reply(text, parse_mode=None)
